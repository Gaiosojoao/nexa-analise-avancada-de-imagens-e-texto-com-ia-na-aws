import boto3
import time
import logging
from botocore.exceptions import BotoCoreError, ClientError

def start_textract_job(bucket_name, file_name):
    """Inicia o processamento do arquivo PDF com o Textract."""
    textract_client = boto3.client('textract')
    try:
        response = textract_client.start_document_text_detection(
            DocumentLocation={
                'S3Object': {
                    'Bucket': bucket_name,
                    'Name': file_name
                }
            }
        )
        return response['JobId']
    except (BotoCoreError, ClientError) as error:
        logging.error(f"Erro ao iniciar o trabalho no Textract: {error}")
        raise

def check_job_status(job_id):
    """Verifica o status do trabalho do Textract."""
    textract_client = boto3.client('textract')
    while True:
        try:
            response = textract_client.get_document_text_detection(JobId=job_id)
            status = response['JobStatus']
            
            if status in ['SUCCEEDED', 'FAILED']:
                return response
            
            logging.info("Processamento em andamento. Aguardando...")
            time.sleep(5)
        except (BotoCoreError, ClientError) as error:
            logging.error(f"Erro ao verificar o status do trabalho: {error}")
            raise

def extract_text_from_textract_response(response):
    """Extrai o texto do resultado do Textract."""
    blocks = response.get('Blocks', [])
    extracted_text = []

    for block in blocks:
        if block['BlockType'] == 'LINE':
            extracted_text.append(block['Text'])

    return '\n'.join(extracted_text)

def main():
    # Configurações
    bucket_name = "bucket-name"
    file_name = "file.pdf"

    logging.basicConfig(level=logging.INFO)

    try:
        logging.info("Iniciando o trabalho no Textract...")
        job_id = start_textract_job(bucket_name, file_name)
        logging.info(f"Trabalho iniciado com JobId: {job_id}")

        logging.info("Aguardando o processamento do Textract...")
        response = check_job_status(job_id)

        if response['JobStatus'] == 'SUCCEEDED':
            logging.info("Processamento concluído com sucesso.")
            text = extract_text_from_textract_response(response)
            
            # Salva o texto extraído em um arquivo
            with open("resultado.txt", "w", encoding="utf-8") as output_file:
                output_file.write(text)

            logging.info("Texto extraído e salvo em 'resultado.txt'.")
        else:
            logging.error("O processamento falhou.")
    except Exception as e:
        logging.error(f"Ocorreu um erro: {e}")

if __name__ == "__main__":
    main()
